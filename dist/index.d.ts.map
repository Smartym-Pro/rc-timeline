{"mappings":"AAEA;IACE,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE,GAAG,CAAC;CACZ;AACD,6BAA6B;IAAE,CAAC,IAAI,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;CAAE,CAAC;AAWjE;IACE,KAAK,EAAE,aAAa,CAAC;IACrB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAoCD,wBAA+B,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC;AAC/F,6BAAoC,CAAC,YAAY,EAAE,aAAa,KAAK,IAAI,CAAC;AAC1E,yBAAgC,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;AACnE,2BAAkC,CAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC;AoB/CpH,+BAA+B,aAAa,CAAC;AAC7C,kCAAkC,iBAAiB,CAAC;AACpD,gCAAgC,qBAAqB,CAAC;AAGtD;IACE,KAAK,CAAC,EAAE;QAAE,CAAC,IAAI,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;KAAE,CAAC;IAC5C,eAAe,CAAC,EAAE,mBAAmB,CAAC;IACtC,YAAY,CAAC,EAAE,gBAAgB,CAAC;IAChC,iBAAiB,CAAC,EAAE,qBAAqB,CAAC;IAC1C,aAAa,CAAC,EAAE,iBAAiB,CAAC;IAClC,aAAa,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC;IAC/B,aAAa,CAAC,EAAE,OAAO,CAAC;CACzB;AAiBD,QAAA,MAAM,QAAQ,UAAW,aAAa,gBAOrC,CAAC;AAEF,eAAe,QAAQ,CAAC","sources":["src/src/common/interface.ts","src/src/common/constants.ts","src/src/utils/common.ts","src/src/components/TimeTable/EventsPanel/CalendarBodyMonths/CalendarBodyMonths.tsx","src/src/layers/ConfigLayer.tsx","src/src/context/reducer.ts","src/src/context/store.tsx","src/src/components/eventButton/EventButton.utils.ts","src/src/components/eventButton/utils/dragging.ts","src/src/components/buttonBase/ButtonBase.tsx","src/src/components/eventButton/components/eventSummary/EventSummary.tsx","src/src/components/eventButton/eventNormal/EventNormal.tsx","src/src/utils/stateReducer.ts","src/src/utils/sizes.ts","src/src/components/eventButton/EventButton.tsx","src/src/components/TimeTable/EventsPanel/EventsPanel.tsx","src/src/components/TimeTable/TimeTable.tsx","src/src/components/controls/TopControl.tsx","src/src/Calendar.tsx","src/src/layers/DimensionsLayoutLayer.tsx","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import {\n  CalendarEvent,\n  CalendarEvents,\n  NewEventClickData,\n  OnEventClickFunc,\n  OnEventDragFinishFunc,\n  OnNewEventClickFunc,\n  OnDeleteEventFunc,\n} from './common/interface';\nimport Calendar from './Calendar';\nimport ConfigLayer from './layers/ConfigLayer';\nimport DimensionsLayoutLayer from './layers/DimensionsLayoutLayer';\nimport StoreProvider from './context/store';\nimport React, { useRef } from 'react';\nimport { isEqual } from 'lodash';\nexport type { CalendarEvent };\nexport type OnEventClickData = CalendarEvent;\nexport type OnNewEventClickData = NewEventClickData;\nexport type OnEventDragFinish = OnEventDragFinishFunc;\nexport type { CalendarEvents };\n\nexport interface TimelineProps {\n  items?: { [type: string]: CalendarEvent[] };\n  onNewEventClick?: OnNewEventClickFunc;\n  onEventClick?: OnEventClickFunc;\n  onEventDragFinish?: OnEventDragFinishFunc;\n  onDeleteEvent?: OnDeleteEventFunc;\n  sortDirection?: 'ASC' | 'DESC';\n  preventUpdate?: boolean;\n}\n\nconst MemoizedCalendar = React.memo(\n  ({ props, items }: { props: TimelineProps; items: CalendarEvents }) => (\n    <div className=\"Kalend__Calendar__root Kalend__main\">\n      <StoreProvider {...props}>\n        <ConfigLayer {...props}>\n          <DimensionsLayoutLayer>\n            <Calendar items={items as CalendarEvents} />\n          </DimensionsLayoutLayer>\n        </ConfigLayer>\n      </StoreProvider>\n    </div>\n  ),\n  (oldP, nextP) => isEqual(oldP.items, nextP.items),\n);\n\nconst Timeline = (props: TimelineProps) => {\n  const itemsRef = useRef({} as CalendarEvents);\n  if (!props.preventUpdate) {\n    itemsRef.current = props.items as CalendarEvents;\n  }\n\n  return <MemoizedCalendar props={props} items={itemsRef.current} />;\n};\n\nexport default Timeline;\n"],"names":[],"version":3,"file":"index.d.ts.map"}